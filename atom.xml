<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Huqiyang&#39;s Blog</title>
  <subtitle>菜鸟成长日记</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://huqiyang.github.io/"/>
  <updated>2017-02-09T09:01:53.590Z</updated>
  <id>http://huqiyang.github.io/</id>
  
  <author>
    <name>胡麒阳</name>
    <email>huqiyang0124@163.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>利用Hexo和Github搭建个人博客</title>
    <link href="http://huqiyang.github.io/2017/02/09/%E5%88%A9%E7%94%A8Hexo%E5%92%8CGithub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>http://huqiyang.github.io/2017/02/09/利用Hexo和Github搭建个人博客/</id>
    <published>2017-02-09T09:00:49.000Z</published>
    <updated>2017-02-09T09:01:53.590Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一-准备工作"><a href="#一-准备工作" class="headerlink" title="一. 准备工作"></a>一. 准备工作</h2><h5 id="1-安装Git"><a href="#1-安装Git" class="headerlink" title="1. 安装Git"></a>1. <a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/00137396287703354d8c6c01c904c7d9ff056ae23da865a000" target="_blank" rel="external">安装Git</a></h5><h5 id="2-安装Node-v6-9-5-LTS"><a href="#2-安装Node-v6-9-5-LTS" class="headerlink" title="2. 安装Node v6.9.5 LTS"></a>2. <a href="https://nodejs.org/dist/v6.9.5/node-v6.9.5-x64.msi" target="_blank" rel="external">安装Node v6.9.5 LTS</a></h5><h5 id="3-安装Hexo"><a href="#3-安装Hexo" class="headerlink" title="3. 安装Hexo"></a>3. 安装Hexo</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># 使用以下命令安装hexo到全局</div><div class="line">$ npm install -g hexo</div><div class="line"># 然后输入命令`hexo -v`显示hexo的版本号即为安装成功。</div></pre></td></tr></table></figure>
<h5 id="4-github准备"><a href="#4-github准备" class="headerlink" title="4. github准备"></a>4. github准备</h5><p>博客是在<a href="https://github.com/" target="_blank" rel="external">github</a>上托管维护的，所以当然需要一个github的账号了。然后创建一个名为huqiyang.github.io<br>的仓库。<br>其中<code>huqiyang</code>是我的账户名，下文同理。<br>除此之外，相信大多数人都知道，要想使用<a href="http://lib.csdn.net/base/git" target="_blank" rel="external">Git</a>命令来和github进行提交部署等操作，需要进行一些配置，大概就是下面一些命令，如不明白请自行搜索。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">git config --global user.email xxx@163.com</div><div class="line">git config --global user.name xxx</div><div class="line">ssh-keygen -t rsa -C xxx@163.com(邮箱地址)      // 生成ssh</div><div class="line"># 找到.ssh文件夹打开，用记事本打开id_rsa.pub，即公钥ssh串</div><div class="line"># 登陆github，settings － SSH keys  － add ssh keys（把公钥ssh串全部添加进去即可）</div></pre></td></tr></table></figure></p>
<h2 id="二-开始搭建博客"><a href="#二-开始搭建博客" class="headerlink" title="二. 开始搭建博客"></a>二. 开始搭建博客</h2><p>在某个地方新建一个项目文件夹（比如Blog），然后进入Blog目录，以下所有的命令行操作都是在这个文件夹下进行的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"># 初始化</div><div class="line">$ hexo init</div><div class="line"># 生成静态页面，初始化完成之后，就已经生成一篇“hello word”的文章了，现在执行以下命令把文章编译为静态页面</div><div class="line">$ hexo generate</div><div class="line"># 本地启动</div><div class="line"># 在浏览器中输入http://localhost:4000/即可看到默认生成的页面效果</div><div class="line"></div><div class="line"># 新建文章postname，该操作会在Blog/source/_posts内新建一个md文件</div><div class="line">$ hexo new &quot;postname&quot; </div><div class="line"># 设置标签等属性，下面就写markdown文档</div><div class="line">---</div><div class="line">title: test</div><div class="line">date: 2017-02-09 14:59:35</div><div class="line">tags: Node.js</div><div class="line">---</div></pre></td></tr></table></figure></p>
<h2 id="三-更换主题"><a href="#三-更换主题" class="headerlink" title="三. 更换主题"></a>三. 更换主题</h2><ul>
<li>更多主题参看 <a href="https://hexo.io/themes/" target="_blank" rel="external">Hexo Themes</a> 或者直接在Github上搜索</li>
<li>我因为不喜欢NexT的风格而选择了 indigo <a href="https://github.com/yscoder/hexo-theme-indigo" target="_blank" rel="external">一个Material Design风格的Hexo主题</a></li>
</ul>
<h4 id="clone主题代码-Indigo主题说明文档"><a href="#clone主题代码-Indigo主题说明文档" class="headerlink" title="clone主题代码 Indigo主题说明文档"></a>clone主题代码 <a href="https://github.com/yscoder/hexo-theme-indigo/wiki" target="_blank" rel="external">Indigo主题说明文档</a></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"># 在目录下执行下面的命令clone主题代码</div><div class="line">git clone https://github.com/yscoder/hexo-theme-indigo.git themes/indigo</div><div class="line"></div><div class="line"># 安装依赖</div><div class="line"># Less 主题默认使用 less 作为 css 预处理工具。</div><div class="line">$ npm install hexo-renderer-less --save</div><div class="line"></div><div class="line"># Feed 用于生成 rss。</div><div class="line">$ npm install hexo-generator-feed --save</div><div class="line"></div><div class="line"># Json-content 用于生成静态站点数据，用作站内搜索的数据源。</div><div class="line">$ npm install hexo-generator-json-content --save</div><div class="line"></div><div class="line"># QRCode 用于生成微信分享二维码。</div><div class="line">$ npm install hexo-helper-qrcode --save</div></pre></td></tr></table></figure>
<h2 id="四-部署到Github"><a href="#四-部署到Github" class="headerlink" title="四. 部署到Github"></a>四. 部署到Github</h2><ul>
<li><p>部署之前先修改Blog/_config.yml文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">deploy:</div><div class="line">    type: git</div><div class="line">    repository: https://github.com/huqiyang/huqiyang.github.com.git</div><div class="line">    branch: master</div></pre></td></tr></table></figure>
</li>
<li><p>再输入以下命令</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ npm install hexo-deployer-git--save # 如果报错就安装这个</div><div class="line">$ hexo deploy</div><div class="line"># 文件生成后立即部署网站</div><div class="line">$ hexo g -d</div></pre></td></tr></table></figure>
</li>
<li><p><a href="http://huqiyang.github.io/">初步成果</a></p>
</li>
</ul>
<h2 id="参考网站"><a href="#参考网站" class="headerlink" title="参考网站"></a>参考网站</h2><p><a href="http://blog.csdn.net/scythe666/article/details/51956821" target="_blank" rel="external">hexo VS jekyll</a><br><a href="https://github.com/yscoder/hexo-theme-indigo/wiki" target="_blank" rel="external">indigo 主题</a><br><a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="external">Hexo 文档</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一-准备工作&quot;&gt;&lt;a href=&quot;#一-准备工作&quot; class=&quot;headerlink&quot; title=&quot;一. 准备工作&quot;&gt;&lt;/a&gt;一. 准备工作&lt;/h2&gt;&lt;h5 id=&quot;1-安装Git&quot;&gt;&lt;a href=&quot;#1-安装Git&quot; class=&quot;headerlink&quot; 
    
    </summary>
    
    
      <category term="Hexo" scheme="http://huqiyang.github.io/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>test</title>
    <link href="http://huqiyang.github.io/2017/02/09/test/"/>
    <id>http://huqiyang.github.io/2017/02/09/test/</id>
    <published>2017-02-09T06:59:35.000Z</published>
    <updated>2017-02-09T07:04:47.044Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<h5 id="完成进度"><a href="#完成进度" class="headerlink" title="完成进度"></a>完成进度</h5><h6 id="教师端："><a href="#教师端：" class="headerlink" title="教师端："></a>教师端：</h6><ol>
<li>学生的添加删除等操作</li>
<li>考题和分数的添加删除编辑修改等操作</li>
<li>在查看考试情况页面显示所有考生的姓名和学号，以及状态信息（红色：已登录；灰色：未登录；蓝色：考试中；绿色：已交卷）</li>
<li>点击已提交的考生对象，进入该考生的阅卷界面，显示该考生提交考卷和答案的信息，并且可以批阅该考卷的得分；</li>
<li>实时显示考生的状态</li>
</ol>
<h6 id="学生端："><a href="#学生端：" class="headerlink" title="学生端："></a>学生端：</h6><ol>
<li>考生登入系统后，若时间未到，显示倒计时，点击题号弹出警告框；若时间到，可进行答题</li>
<li>点击题号后进入答题状态，同时教师端会实时显示考生的状态；</li>
<li>点击其他题号答题自动保存；</li>
<li>考试时间到自动提交等；</li>
</ol>
</blockquote>
<h6 id="预览"><a href="#预览" class="headerlink" title="预览"></a>预览</h6><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://upload-images.jianshu.io/upload_images/3120794-d975d39d0cff9300.gif?imageMogr2/auto-orient/strip" alt="教师端实时显示考生状态" title="">
                </div>
                <div class="image-caption">教师端实时显示考生状态</div>
            </figure>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://upload-images.jianshu.io/upload_images/3120794-d285a13d7f052aea.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="教师端界面" title="">
                </div>
                <div class="image-caption">教师端界面</div>
            </figure>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://upload-images.jianshu.io/upload_images/3120794-18d2d665f472586f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="学生端界面" title="">
                </div>
                <div class="image-caption">学生端界面</div>
            </figure>
<h3 id="1-数据结构定义"><a href="#1-数据结构定义" class="headerlink" title="1. 数据结构定义"></a>1. 数据结构定义</h3><h6 id="1-用户表"><a href="#1-用户表" class="headerlink" title="1.用户表"></a>1.用户表</h6><blockquote>
<p>用户学号<code>userId</code>，姓名<code>username</code>， 密码<code>password</code>， 类型<code>category</code>（学生/老师）， 状态<code>status</code>（初始，登录，答题，提交）</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">var userSchema = new Schema(&#123;</div><div class="line">    userId: String,</div><div class="line">    username: String,</div><div class="line">    password: String,</div><div class="line">    category: String,   //分类-学生</div><div class="line">    status: String, //状态</div><div class="line">    meta: &#123;</div><div class="line">        updateAt: &#123;type:Date, default: Date.now()&#125;,</div><div class="line">        createAt: &#123;type:Date, default: Date.now()&#125;</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h6 id="2-答题表"><a href="#2-答题表" class="headerlink" title="2.答题表"></a>2.答题表</h6><blockquote>
<p>题目内容<code>content</code>，分数<code>score</code></p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">var questionSchema = new Schema(&#123;</div><div class="line">    content: String,</div><div class="line">    score: Number,</div><div class="line">    meta: &#123;</div><div class="line">        updateAt: &#123;type:Date, default: Date.now()&#125;,</div><div class="line">        createAt: &#123;type:Date, default: Date.now()&#125;</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h6 id="3-学生答题内容表"><a href="#3-学生答题内容表" class="headerlink" title="3. 学生答题内容表"></a>3. 学生答题内容表</h6><blockquote>
<p>学生ID<code>userId</code>，问题ID<code>questionId</code>，回答内容<code>answerCtn</code>， 批阅后得到的分数<code>score</code></p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">var answerSchema = new Schema(&#123;</div><div class="line">    userId: &#123;type: ObjectId, ref: &apos;User&apos;&#125;,</div><div class="line">    questionId: &#123;type: ObjectId, ref: &apos;Question&apos;&#125;,</div><div class="line">    answerCtn: String,</div><div class="line">    score: Number,</div><div class="line">    meta: &#123;</div><div class="line">        updateAt: &#123;type:Date, default: Date.now()&#125;,</div><div class="line">        createAt: &#123;type:Date, default: Date.now()&#125;</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="2-教师端模块分解"><a href="#2-教师端模块分解" class="headerlink" title="2. 教师端模块分解"></a>2. 教师端模块分解</h3><h6 id="2-1-学生管理"><a href="#2-1-学生管理" class="headerlink" title="2.1 学生管理"></a>2.1 学生管理</h6><blockquote>
<ul>
<li>学生列表：查看已添加的学生学号和姓名</li>
<li>添加学生：添加新学生</li>
</ul>
</blockquote>
<h6 id="2-2-题目管理"><a href="#2-2-题目管理" class="headerlink" title="2.2 题目管理"></a>2.2 题目管理</h6><blockquote>
<ul>
<li>查看题目列表：点击题号显示保存的题目内容和分数，点击文本框修改内容</li>
<li>添加题目：添加新题目和分数</li>
</ul>
</blockquote>
<h6 id="2-3-考试情况"><a href="#2-3-考试情况" class="headerlink" title="2.3 考试情况"></a>2.3 考试情况</h6><blockquote>
<ul>
<li>学生考试状态：<ol>
<li>实时查看学生的各种状态信息（红色：已登录；灰色：未登录；蓝色：考试中；绿色：已交卷）</li>
<li>可点击已交卷的学生块，进行对该学生的阅卷操作</li>
</ol>
</li>
<li>学生考试成绩：查看学生的考试成绩信息</li>
</ul>
</blockquote>
<h3 id="3-学生端模块分解"><a href="#3-学生端模块分解" class="headerlink" title="3. 学生端模块分解"></a>3. 学生端模块分解</h3><h6 id="3-1-倒计时模块"><a href="#3-1-倒计时模块" class="headerlink" title="3.1 倒计时模块"></a>3.1 倒计时模块</h6><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://upload-images.jianshu.io/upload_images/3120794-98d5c72e5d57ea1b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="倒计时模块" title="">
                </div>
                <div class="image-caption">倒计时模块</div>
            </figure>
<blockquote>
<ul>
<li>未到达开考时间显示 “距离考试开始” 的倒计时；</li>
<li>到达开考时间显示 “距离考试结束” 的倒计时，直到考试结束倒计时停止；</li>
</ul>
</blockquote>
<h6 id="3-2-答题模块"><a href="#3-2-答题模块" class="headerlink" title="3.2 答题模块"></a>3.2 答题模块</h6><blockquote>
<ul>
<li>若考试时间未到点击题号，弹出警告框（考试时间未到）；</li>
<li>考试时间到学生点击题号进入答题状态，教师端更新学生状态；</li>
<li>考试未结束考生点击提交或者考试时间到，考生转换成提交状态，教师端更新学生状态，提交状态的考生无法继续答题；</li>
</ul>
</blockquote>
<h3 id="4-模块代码分析"><a href="#4-模块代码分析" class="headerlink" title="4. 模块代码分析"></a>4. 模块代码分析</h3><h6 id="4-1-登录检测"><a href="#4-1-登录检测" class="headerlink" title="4.1 登录检测"></a>4.1 登录检测</h6><blockquote>
<p>用户类型分为考生和教师，在登录时检测用户的类型，如果是教师则登入教师端页面，如果是考生则进入考生页面。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">// result为登录成功返回的用户信息</div><div class="line">if (result.data.category === &quot;TEACHER&quot;) &#123;</div><div class="line">    location.href = &quot;/p/index&quot;;</div><div class="line">&#125; else &#123;</div><div class="line">    location.href = &quot;/p/indexStudent&quot;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h6 id="4-2-添加学生（添加题目方法类似）"><a href="#4-2-添加学生（添加题目方法类似）" class="headerlink" title="4.2 添加学生（添加题目方法类似）"></a>4.2 添加学生（添加题目方法类似）</h6><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://upload-images.jianshu.io/upload_images/3120794-70b0ed6eb88768b3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="添加学生页面元素" title="">
                </div>
                <div class="image-caption">添加学生页面元素</div>
            </figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">//postData()为之后的post提供函数</div><div class="line">function postData(url, data, cb) &#123;</div><div class="line">    var promise = $.ajax(&#123;</div><div class="line">        type: &quot;post&quot;,</div><div class="line">        url: url,</div><div class="line">        dataType: &quot;json&quot;,</div><div class="line">        contentType: &quot;application/json&quot;,</div><div class="line">        data:data</div><div class="line">    &#125;);</div><div class="line">    promise.done(cb);</div><div class="line">&#125;</div><div class="line"></div><div class="line">//传递JSON</div><div class="line">function doAddStudent() &#123;</div><div class="line">    var jsonData = JSON.stringify(&#123;</div><div class="line">        &apos;usrId&apos;: usrId,</div><div class="line">        &apos;pwd&apos;: pwd,</div><div class="line">        &apos;username&apos;: username</div><div class="line">    &#125;);</div><div class="line">    postData(urlAddStudent, jsonData, cbAddStudent);</div><div class="line">&#125;</div><div class="line"></div><div class="line">//返回结果</div><div class="line">function cbAddStudent(result) &#123;</div><div class="line">    if (result.code == 99) &#123;</div><div class="line">        alert(result.msg);</div><div class="line">    &#125; else &#123;</div><div class="line">        alert(&quot;添加成功！&quot;);</div><div class="line">        location.href = &apos;/p/index&apos;;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h6 id="4-3-阅卷（查看考题信息和学生答题模块方法类似）"><a href="#4-3-阅卷（查看考题信息和学生答题模块方法类似）" class="headerlink" title="4.3 阅卷（查看考题信息和学生答题模块方法类似）"></a>4.3 阅卷（查看考题信息和学生答题模块方法类似）</h6><blockquote>
<p>进入页面通过POST从数据库获得题目列表，渲染出题号列表，每个题号给予一个<code>data-id</code></p>
</blockquote>
<p>post获取题目列表，通过<code>$.format(QUESTION_LIST, list[i]._id, i+1);</code>渲染每一个题号，添加到<code>(&quot;.item-number&quot;</code>里；<br>QUESTION_LIST模板<br><code>var QUESTION_LIST = &quot;&lt;div class=&#39;question-item&#39; data-toggle=&#39;select&#39; data-id=&#39;{0}&#39;&gt;{1}&lt;/div&gt;&quot;;</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">//获取题目列表</div><div class="line">function getQuestionList() &#123;</div><div class="line">    var jsonData = JSON.stringify(&#123;&#125;);</div><div class="line">    postData(urlGetQuestionList, jsonData, cbQuestionList);</div><div class="line">&#125;</div><div class="line">function cbQuestionList(result) &#123;</div><div class="line">    var list = result.results;</div><div class="line">    for(var i = 0; i &lt; list.length; i++) &#123;</div><div class="line">        var html = $.format(QUESTION_LIST, list[i]._id, i+1);</div><div class="line">        $(&quot;.item-number&quot;).append(html);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>点击题号获得<code>data-id</code><br> <code>$(&quot;body&quot;).on(&quot;click&quot;, &quot;[data-toggle=&#39;select&#39;]&quot;, showContent);</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">//显示题目内容和学生答题内容</div><div class="line">function showContent(e) &#123;</div><div class="line">    $(&quot;.answer-wrap&quot;).removeClass(&quot;hide&quot;);</div><div class="line">    e.preventDefault();</div><div class="line">    var $this = $(this);</div><div class="line">    questionId = $this.data(&apos;id&apos;);</div><div class="line">    $(&quot;#question-head&quot;).text(&quot;第&quot; + $(this).text() + &quot;题&quot;);</div><div class="line">    getQuestionCtn();</div><div class="line">    getAnswerOne();</div><div class="line">    if(questionId != 0) &#123;</div><div class="line">        saveMark();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>post获取题目内容,返回结果放到指定div内<br><code>$(&quot;#questionContent&quot;).text(result.content);</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">//获取题目内容</div><div class="line">function getQuestionCtn() &#123;</div><div class="line">    var jsonData = JSON.stringify(&#123;</div><div class="line">        &quot;_id&quot;: questionId</div><div class="line">    &#125;);</div><div class="line">    postData(urlGetQuestionCtn, jsonData, cbShowQuestionCtn);</div><div class="line">&#125;</div><div class="line">function cbShowQuestionCtn(result) &#123;</div><div class="line">    $(&quot;#que-score&quot;).text(&quot;分值：&quot; + result.score);</div><div class="line">    $(&quot;#questionContent&quot;).text(result.content);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>post获取学生答题内容，返回的结果放到指定div内<br><code>$(&quot;#answerCtn&quot;).text(result.answerCtn);</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">//获得学生答案</div><div class="line">function getAnswerOne() &#123;</div><div class="line">    var jsonData = JSON.stringify(&#123;</div><div class="line">        &quot;userId&quot;: studentId,</div><div class="line">        &quot;questionId&quot;: questionId</div><div class="line">    &#125;);</div><div class="line">    postData(urlGetAnswerOne, jsonData, cbShowAnswer);</div><div class="line">&#125;</div><div class="line">function cbShowAnswer(result) &#123;</div><div class="line">    if(result != &quot;99&quot;) &#123;</div><div class="line">        $(&quot;#give-score&quot;).val(result.score);</div><div class="line">        $(&quot;#answerCtn&quot;).text(result.answerCtn);</div><div class="line">    &#125; else &#123;</div><div class="line">        $(&quot;#answerCtn&quot;).text(&quot;该学生没有完成该题目&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h6 id="4-4-考生端倒计时"><a href="#4-4-考生端倒计时" class="headerlink" title="4.4 考生端倒计时"></a>4.4 考生端倒计时</h6><blockquote>
<ol>
<li>将教师设定的开考时间和结束时间分别与当前时间比较，得到相差的时间差毫秒<code>seconds</code>。对<code>seconds</code>进行处理得到格式化的字符串表示时间。</li>
<li>若当前时间小于开考时间，显示距离考试开始倒计时，到时间<code>seconds &lt;= 0</code>，进入答题倒计时，显示距离考试结束倒计时，直到<code>seconds &lt;= 0</code>，停止倒计时并自动提交考卷，考生转换成提交状态<code>SUBMIT</code>；</li>
</ol>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">function getTimeDifference(y, n, M, h, m) &#123;</div><div class="line">    var now = new Date();</div><div class="line">    var startTime =  new Date(y, n, M, h, m);</div><div class="line">    var timeDifference = startTime.getTime() - now.getTime();</div><div class="line">    var second = parseInt(timeDifference / 1000);</div><div class="line">    var time = &#123;</div><div class="line">        remain: second,</div><div class="line">        second: (second &lt; 60) ? second : second % 60,</div><div class="line">        hour: parseInt(second / 3600),</div><div class="line">        minute: parseInt((second - parseInt(second / 3600) * 3600) / 60)</div><div class="line">    &#125;;</div><div class="line">    return time;</div><div class="line">&#125;</div><div class="line">//考试开始时间</div><div class="line">function timeBefore() &#123;</div><div class="line">    var timer = setInterval(function() &#123;</div><div class="line">        var time = getTimeDifference(2016, 10, 24, 18, 56);</div><div class="line">        $(&apos;#time-title&apos;).text(&quot;距离考试开始&quot;);</div><div class="line">        $(&apos;#time-ctn&apos;).text(time.hour + &quot; : &quot; + time.minute + &quot; : &quot; + time.second);</div><div class="line">        if(time.remain &lt;= 0) &#123;</div><div class="line">            status = START;</div><div class="line">            showExamTime();</div><div class="line">            clearInterval(timer);</div><div class="line">        &#125;</div><div class="line">    &#125;, 1000);</div><div class="line">&#125;</div><div class="line">//考试结束倒计时</div><div class="line">function showExamTime() &#123;</div><div class="line">    var timer = setInterval(function() &#123;</div><div class="line">        var time = getTimeDifference(2016, 10, 24, 23, 59);</div><div class="line">        $(&apos;#time-title&apos;).text(&quot;距离考试结束&quot;);</div><div class="line">        $(&apos;#time-ctn&apos;).text(time.hour + &quot; : &quot; + time.minute + &quot; : &quot; + time.second);</div><div class="line">        if(time.remain &lt;= 0) &#123;</div><div class="line">            status = END;</div><div class="line">            doUpdate(SUBMIT);</div><div class="line">            clearInterval(timer);</div><div class="line">        &#125;</div><div class="line">    &#125;, 1000);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="5-将考生端的考生状态实时更新到教师端"><a href="#5-将考生端的考生状态实时更新到教师端" class="headerlink" title="5. 将考生端的考生状态实时更新到教师端"></a>5. 将考生端的考生状态实时更新到教师端</h3><blockquote>
<ol>
<li>考生登录系统发送带有用户ID<code>userId</code>和用户类型<code>category</code>的 <code>login</code> 消息给服务器，服务器保存该用户（<code>user[userId] = socket</code>），接着判断该用户是否为教师，若是则保存<code>teacherId</code>；最后在数据库中将该用户状态更新为登录<code>LOGIN</code>状态，向教师端发送<code>reload</code>消息，教师端接收到后重新post获取学生状态;</li>
<li>开考时间到，考生处于可考试状态<code>WAIT</code>，考生点击题号转换成答题状态<code>EXAM</code>，post到数据库更新状态<code>EXAM</code>，同时向服务器发送状态转换消息<code>update status</code>，服务器接收到后向教师端发送<code>reload</code>消息`;</li>
<li>考生点击提交按钮，数据库更新状态<code>SUBMIT</code>，同时向服务器发送状态转换消息<code>update status</code>，服务器接收到后向教师端发送<code>reload</code>消息`;</li>
</ol>
</blockquote>
<h6 id="考生端"><a href="#考生端" class="headerlink" title="考生端"></a>考生端</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line">//socket初始化</div><div class="line">function socketInit() &#123;</div><div class="line">    var data = &#123;</div><div class="line">        userId: userId,</div><div class="line">        userCategory: userCategory</div><div class="line">    &#125;;</div><div class="line">    socket.emit(&quot;login&quot;, data);</div><div class="line">    status = LOGIN;</div><div class="line">&#125;</div><div class="line"></div><div class="line">function showQuestion(e) &#123;</div><div class="line">    //如果为开考状态且用户不处于提交状态</div><div class="line">    if(status == START &amp;&amp; userStatus != SUBMIT) &#123;</div><div class="line">        getQuestionCtn();  //获取题目内容</div><div class="line">        getAnswerOne();   //获取保存的答题内容</div><div class="line">        doUpdate(EXAM);  //转换为答题状态</div><div class="line">    &#125; else if(userStatus == SUBMIT) &#123;</div><div class="line">        alert(&quot;你已提交答卷，请等候老师批阅。&quot;);</div><div class="line">    &#125; else if(status != START) &#123;</div><div class="line">        alert(&quot;考试时间未到！&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">//获取题目列表</div><div class="line">function getQuestionCtn() &#123;&#125;</div><div class="line">function cbShowQuestionCtn(result) &#123;&#125;</div><div class="line"></div><div class="line">//保存答题内容</div><div class="line">function doSaveAnswer() &#123;&#125;</div><div class="line"></div><div class="line">//获取答题保存的内容</div><div class="line">function getAnswerOne() &#123;&#125;</div><div class="line">function cbShowAnswer(result) &#123;&#125;</div><div class="line"></div><div class="line">//数据库更新用户状态SUBMIT，向教师端发送reload消息</div><div class="line">function doUpdate(status) &#123;</div><div class="line">    socket.emit(&quot;update status&quot;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">//转换成SUBMIT状态</div><div class="line">function cbUpdateStatus(result) &#123;</div><div class="line">     userStatus = SUBMIT;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h6 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">io.on(&apos;connection&apos;, function(socket)&#123;</div><div class="line">  //用户登录</div><div class="line">  socket.on(&apos;login&apos;, function (data) &#123;</div><div class="line">    socket.name = data.userId;</div><div class="line">    user[data.userId] = socket;</div><div class="line">    var data2 = &#123;</div><div class="line">      userId: socket.name,</div><div class="line">      status: &quot;LOGIN&quot;</div><div class="line">    &#125;;</div><div class="line">    dbHelper.updateStatus(data2, function (success, doc) &#123;&#125;);</div><div class="line">    //用户类型-老师</div><div class="line">    if(data.userCategory === &quot;TEACHER&quot;) &#123;</div><div class="line">      teacherId = data.userId;</div><div class="line">    &#125;</div><div class="line">    //向老师的客户端发送重新加载命令</div><div class="line">    if(teacherId !== 0) &#123;</div><div class="line">      user[teacherId].emit(&quot;reload&quot;);</div><div class="line">    &#125;</div><div class="line">  &#125;);</div><div class="line">  socket.on(&apos;update status&apos;, function () &#123;</div><div class="line">    if(teacherId !== 0) &#123;</div><div class="line">      user[teacherId].emit(&quot;reload&quot;);</div><div class="line">    &#125;</div><div class="line">  &#125;);</div><div class="line">  //用户退出</div><div class="line">  socket.on(&apos;disconnect&apos;, function () &#123;</div><div class="line">    var data = &#123;</div><div class="line">      userId: socket.name,</div><div class="line">      status: &quot;INIT&quot;</div><div class="line">    &#125;;</div><div class="line">    dbHelper.updateStatus(data, function (success, doc) &#123;&#125;);</div><div class="line">    if(socket.name === teacherId) &#123;</div><div class="line">      teacherId = 0;</div><div class="line">    &#125; else if(teacherId !== 0)&#123;</div><div class="line">      user[teacherId].emit(&quot;reload&quot;);</div><div class="line">    &#125;</div><div class="line">    delete user[socket.name];</div><div class="line">  &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p><a href="https://github.com/HZNU-QUANTA/NODE-HQY/tree/master/OnlinExamSystem" target="_blank" rel="external">Github参考代码</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;h5 id=&quot;完成进度&quot;&gt;&lt;a href=&quot;#完成进度&quot; class=&quot;headerlink&quot; title=&quot;完成进度&quot;&gt;&lt;/a&gt;完成进度&lt;/h5&gt;&lt;h6 id=&quot;教师端：&quot;&gt;&lt;a href=&quot;#教师端：&quot; class=&quot;headerlink&quot; tit
    
    </summary>
    
    
      <category term="Node.js" scheme="http://huqiyang.github.io/tags/Node-js/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://huqiyang.github.io/2017/02/09/hello-world/"/>
    <id>http://huqiyang.github.io/2017/02/09/hello-world/</id>
    <published>2017-02-09T03:42:11.386Z</published>
    <updated>2017-02-09T03:42:11.393Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>网页聊天室之Socket.io 的学习</title>
    <link href="http://huqiyang.github.io/2016/09/30/%E7%BD%91%E9%A1%B5%E8%81%8A%E5%A4%A9%E5%AE%A4%E4%B9%8BSocket-io-%E7%9A%84%E5%AD%A6%E4%B9%A0/"/>
    <id>http://huqiyang.github.io/2016/09/30/网页聊天室之Socket-io-的学习/</id>
    <published>2016-09-30T08:47:10.000Z</published>
    <updated>2017-02-18T13:31:54.968Z</updated>
    
    <content type="html"><![CDATA[<h3 id="socket-io系统api"><a href="#socket-io系统api" class="headerlink" title="socket.io系统api"></a>socket.io系统api</h3><h3 id="1-服务端"><a href="#1-服务端" class="headerlink" title="1. 服务端"></a>1. 服务端</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">io.on(&apos;connection&apos;,function(socket));</div><div class="line">监听客户端连接,回调函数会传递本次连接的socket</div><div class="line"></div><div class="line">io.sockets.emit(&apos;String&apos;,data);</div><div class="line">给所有客户端广播消息</div><div class="line"></div><div class="line">io.sockets.socket(socketid).emit(&apos;String&apos;, data);</div><div class="line">给指定的客户端发送消息</div><div class="line"></div><div class="line">socket.on(&apos;String&apos;,function(data));</div><div class="line">监听客户端发送的信息</div><div class="line"></div><div class="line">socket.emit(&apos;String&apos;, data);</div><div class="line">给该socket的客户端发送消息</div></pre></td></tr></table></figure>
<p><strong>广播消息</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">//给除了自己以外的客户端广播消息</div><div class="line">socket.broadcast.emit(&quot;msg&quot;,&#123;data:&quot;hello,everyone&quot;&#125;); </div><div class="line"></div><div class="line">//给所有客户端广播消息</div><div class="line">io.sockets.emit(&quot;msg&quot;,&#123;data:&quot;hello,all&quot;&#125;);</div></pre></td></tr></table></figure></p>
<p><strong>分组</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">socket.on(&apos;group1&apos;, function (data) &#123;</div><div class="line">        socket.join(&apos;group1&apos;);</div><div class="line">&#125;);</div><div class="line">socket.on(&apos;group2&apos;,function(data)&#123;</div><div class="line">        socket.join(&apos;group2&apos;);</div><div class="line"> &#125;);</div></pre></td></tr></table></figure></p>
<p>客户端发送<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">socket.emit(&apos;group1&apos;)，就可以加入group1分组；</div><div class="line">socket.emit(&apos;group2&apos;)，就可以加入group2分组；</div></pre></td></tr></table></figure></p>
<p><strong>踢出分组</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">socket.leave(data.room);</div></pre></td></tr></table></figure></p>
<p><strong>对分组中的用户发送信息</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">//不包括自己</div><div class="line">socket.broadcast.to(&apos;group1&apos;).emit(&apos;event_name&apos;, data);</div><div class="line">//包括自己</div><div class="line">io.sockets.in(&apos;group1&apos;).emit(&apos;event_name&apos;, data);</div></pre></td></tr></table></figure></p>
<p>broadcast方法允许当前socket client不在该分组内<br><strong>获取连接的客户端socket </strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">io.sockets.clients().forEach(function (socket) &#123;</div><div class="line">    //.....</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p><strong>获取分组信息</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">//获取所有房间（分组）信息</div><div class="line">io.sockets.manager.rooms</div><div class="line"></div><div class="line">//来获取此socketid进入的房间信息</div><div class="line">io.sockets.manager.roomClients[socket.id]</div><div class="line"></div><div class="line">//获取particular room中的客户端，返回所有在此房间的socket实例</div><div class="line">io.sockets.clients(&apos;particular room&apos;)</div></pre></td></tr></table></figure></p>
<p><strong>另一种分组方式</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">io.of(&apos;/some&apos;).on(&apos;connection&apos;, function (socket) &#123;</div><div class="line">    socket.on(&apos;test&apos;, function (data) &#123;</div><div class="line">        socket.broadcast.emit(&apos;event_name&apos;,&#123;&#125;);</div><div class="line">    &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>客户端<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var socket = io.connect(&apos;ws://103.31.201.154:5555/some&apos;)</div><div class="line">socket.on(&apos;even_name&apos;,function(data)&#123;</div><div class="line">   console.log(data);</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<blockquote>
<p>客户端都链接到ws://103.31.201.154:5555 但是服务端可以通过io.of(‘/some’)将其过滤出来。</p>
<p>另外，Socket.IO提供了4个配置的API：io.configure, io.set, io.enable, io.disable。其中io.set对单项进行设置，io.enable和io.disable用于单项设置布尔型的配置。io.configure 可以让你对不同的生产环境（如devlopment，test等等）配置不同的参数。</p>
</blockquote>
<p>###2. 客户端<br><strong>建立一个socket连接</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var socket = io(&quot;ws://103.31.201.154:5555&quot;);</div></pre></td></tr></table></figure></p>
<p><strong>监听服务消息</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">socket.on(&apos;msg&apos;,function(data)&#123;</div><div class="line">    socket.emit(&apos;msg&apos;, &#123;rp:&quot;fine,thank you&quot;&#125;); //向服务器发送消息</div><div class="line">    console.log(data);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<blockquote>
<p>socket.on(“String”,function(data)) 监听服务端发送的消息 Sting参数与服务端emit第一个参数相同</p>
</blockquote>
<p><strong>监听socket断开与重连</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">socket.on(&apos;disconnect&apos;, function() &#123;</div><div class="line">    console.log(&quot;与服务其断开&quot;);</div><div class="line">&#125;);</div><div class="line">socket.on(&apos;reconnect&apos;, function() &#123;</div><div class="line">    console.log(&quot;重新连接到服务器&quot;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<blockquote>
<p>客户端socket.on()监听的事件：</p>
<p>connect：连接成功<br>connecting：正在连接<br>disconnect：断开连接<br>connect_failed：连接失败<br>error：错误发生，并且无法被其他事件类型所处理<br>message：同服务器端message事件<br>anything：同服务器端anything事件<br>reconnect_failed：重连失败<br>reconnect：成功重连<br>reconnecting：正在重连<br>当 第一次连接时，事件触发顺序为：connecting-&gt;connect；当失去连接时，事件触发顺序 为：disconnect-&gt;reconnecting（可能进行多 次）-&gt;connecting-&gt;reconnect-&gt;connect。</p>
</blockquote>
<p>摘自：<a href="http://www.cnblogs.com/xiezhengcai/p/3956401.html" target="_blank" rel="external">http://www.cnblogs.com/xiezhengcai/p/3956401.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;socket-io系统api&quot;&gt;&lt;a href=&quot;#socket-io系统api&quot; class=&quot;headerlink&quot; title=&quot;socket.io系统api&quot;&gt;&lt;/a&gt;socket.io系统api&lt;/h3&gt;&lt;h3 id=&quot;1-服务端&quot;&gt;&lt;a href=&quot;#
    
    </summary>
    
      <category term="Node.js学习及实践" scheme="http://huqiyang.github.io/categories/Node-js%E5%AD%A6%E4%B9%A0%E5%8F%8A%E5%AE%9E%E8%B7%B5/"/>
    
    
      <category term="Node.js" scheme="http://huqiyang.github.io/tags/Node-js/"/>
    
  </entry>
  
</feed>
