{"meta":{"title":"Huqiyang's Blog","subtitle":"菜鸟成长日记","description":"前端副本打怪升级中...","author":"胡麒阳","url":"http://huqiyang.github.io"},"pages":[{"title":"","date":"2017-02-09T04:13:19.939Z","updated":"2017-02-09T04:13:19.887Z","comments":false,"path":"tags/index.html","permalink":"http://huqiyang.github.io/tags/index.html","excerpt":"","text":""},{"title":"","date":"2017-02-09T04:13:04.007Z","updated":"2017-02-09T04:13:03.967Z","comments":false,"path":"categories/index.html","permalink":"http://huqiyang.github.io/categories/index.html","excerpt":"","text":""},{"title":"作品展示","date":"2017-02-17T09:39:46.000Z","updated":"2017-02-17T15:57:18.700Z","comments":false,"path":"作品展示/index.html","permalink":"http://huqiyang.github.io/作品展示/index.html","excerpt":"","text":"图片 亚索 个人作品@column-3{ @card{ 个人博客搭建 } @card{ 仿微信网页聊天室 } @card{ 在线考试系统 } }"}],"posts":[{"title":"利用Hexo和Github搭建个人博客","slug":"利用Hexo和Github搭建个人博客","date":"2017-02-09T09:00:49.000Z","updated":"2017-02-09T09:01:53.590Z","comments":true,"path":"2017/02/09/利用Hexo和Github搭建个人博客/","link":"","permalink":"http://huqiyang.github.io/2017/02/09/利用Hexo和Github搭建个人博客/","excerpt":"","text":"一. 准备工作1. 安装Git2. 安装Node v6.9.5 LTS3. 安装Hexo123# 使用以下命令安装hexo到全局$ npm install -g hexo# 然后输入命令`hexo -v`显示hexo的版本号即为安装成功。 4. github准备博客是在github上托管维护的，所以当然需要一个github的账号了。然后创建一个名为huqiyang.github.io的仓库。其中huqiyang是我的账户名，下文同理。除此之外，相信大多数人都知道，要想使用Git命令来和github进行提交部署等操作，需要进行一些配置，大概就是下面一些命令，如不明白请自行搜索。12345git config --global user.email xxx@163.comgit config --global user.name xxxssh-keygen -t rsa -C xxx@163.com(邮箱地址) // 生成ssh# 找到.ssh文件夹打开，用记事本打开id_rsa.pub，即公钥ssh串# 登陆github，settings － SSH keys － add ssh keys（把公钥ssh串全部添加进去即可） 二. 开始搭建博客在某个地方新建一个项目文件夹（比如Blog），然后进入Blog目录，以下所有的命令行操作都是在这个文件夹下进行的。123456789101112131415# 初始化$ hexo init# 生成静态页面，初始化完成之后，就已经生成一篇“hello word”的文章了，现在执行以下命令把文章编译为静态页面$ hexo generate# 本地启动# 在浏览器中输入http://localhost:4000/即可看到默认生成的页面效果# 新建文章postname，该操作会在Blog/source/_posts内新建一个md文件$ hexo new &quot;postname&quot; # 设置标签等属性，下面就写markdown文档---title: testdate: 2017-02-09 14:59:35tags: Node.js--- 三. 更换主题 更多主题参看 Hexo Themes 或者直接在Github上搜索 我因为不喜欢NexT的风格而选择了 indigo 一个Material Design风格的Hexo主题 clone主题代码 Indigo主题说明文档123456789101112131415# 在目录下执行下面的命令clone主题代码git clone https://github.com/yscoder/hexo-theme-indigo.git themes/indigo# 安装依赖# Less 主题默认使用 less 作为 css 预处理工具。$ npm install hexo-renderer-less --save# Feed 用于生成 rss。$ npm install hexo-generator-feed --save# Json-content 用于生成静态站点数据，用作站内搜索的数据源。$ npm install hexo-generator-json-content --save# QRCode 用于生成微信分享二维码。$ npm install hexo-helper-qrcode --save 四. 部署到Github 部署之前先修改Blog/_config.yml文件 1234deploy: type: git repository: https://github.com/huqiyang/huqiyang.github.com.git branch: master 再输入以下命令 1234$ npm install hexo-deployer-git--save # 如果报错就安装这个$ hexo deploy# 文件生成后立即部署网站$ hexo g -d 初步成果 参考网站hexo VS jekyllindigo 主题Hexo 文档","categories":[],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://huqiyang.github.io/tags/Hexo/"}]},{"title":"test","slug":"test","date":"2017-02-09T06:59:35.000Z","updated":"2017-02-09T07:04:47.044Z","comments":true,"path":"2017/02/09/test/","link":"","permalink":"http://huqiyang.github.io/2017/02/09/test/","excerpt":"","text":"完成进度教师端： 学生的添加删除等操作 考题和分数的添加删除编辑修改等操作 在查看考试情况页面显示所有考生的姓名和学号，以及状态信息（红色：已登录；灰色：未登录；蓝色：考试中；绿色：已交卷） 点击已提交的考生对象，进入该考生的阅卷界面，显示该考生提交考卷和答案的信息，并且可以批阅该考卷的得分； 实时显示考生的状态 学生端： 考生登入系统后，若时间未到，显示倒计时，点击题号弹出警告框；若时间到，可进行答题 点击题号后进入答题状态，同时教师端会实时显示考生的状态； 点击其他题号答题自动保存； 考试时间到自动提交等； 预览 教师端实时显示考生状态 教师端界面 学生端界面 1. 数据结构定义1.用户表 用户学号userId，姓名username， 密码password， 类型category（学生/老师）， 状态status（初始，登录，答题，提交） 1234567891011var userSchema = new Schema(&#123; userId: String, username: String, password: String, category: String, //分类-学生 status: String, //状态 meta: &#123; updateAt: &#123;type:Date, default: Date.now()&#125;, createAt: &#123;type:Date, default: Date.now()&#125; &#125;&#125;); 2.答题表 题目内容content，分数score 12345678var questionSchema = new Schema(&#123; content: String, score: Number, meta: &#123; updateAt: &#123;type:Date, default: Date.now()&#125;, createAt: &#123;type:Date, default: Date.now()&#125; &#125;&#125;); 3. 学生答题内容表 学生IDuserId，问题IDquestionId，回答内容answerCtn， 批阅后得到的分数score 12345678910var answerSchema = new Schema(&#123; userId: &#123;type: ObjectId, ref: &apos;User&apos;&#125;, questionId: &#123;type: ObjectId, ref: &apos;Question&apos;&#125;, answerCtn: String, score: Number, meta: &#123; updateAt: &#123;type:Date, default: Date.now()&#125;, createAt: &#123;type:Date, default: Date.now()&#125; &#125;&#125;); 2. 教师端模块分解2.1 学生管理 学生列表：查看已添加的学生学号和姓名 添加学生：添加新学生 2.2 题目管理 查看题目列表：点击题号显示保存的题目内容和分数，点击文本框修改内容 添加题目：添加新题目和分数 2.3 考试情况 学生考试状态： 实时查看学生的各种状态信息（红色：已登录；灰色：未登录；蓝色：考试中；绿色：已交卷） 可点击已交卷的学生块，进行对该学生的阅卷操作 学生考试成绩：查看学生的考试成绩信息 3. 学生端模块分解3.1 倒计时模块 倒计时模块 未到达开考时间显示 “距离考试开始” 的倒计时； 到达开考时间显示 “距离考试结束” 的倒计时，直到考试结束倒计时停止； 3.2 答题模块 若考试时间未到点击题号，弹出警告框（考试时间未到）； 考试时间到学生点击题号进入答题状态，教师端更新学生状态； 考试未结束考生点击提交或者考试时间到，考生转换成提交状态，教师端更新学生状态，提交状态的考生无法继续答题； 4. 模块代码分析4.1 登录检测 用户类型分为考生和教师，在登录时检测用户的类型，如果是教师则登入教师端页面，如果是考生则进入考生页面。 123456// result为登录成功返回的用户信息if (result.data.category === &quot;TEACHER&quot;) &#123; location.href = &quot;/p/index&quot;;&#125; else &#123; location.href = &quot;/p/indexStudent&quot;;&#125; 4.2 添加学生（添加题目方法类似） 添加学生页面元素 12345678910111213141516171819202122232425262728293031//postData()为之后的post提供函数function postData(url, data, cb) &#123; var promise = $.ajax(&#123; type: &quot;post&quot;, url: url, dataType: &quot;json&quot;, contentType: &quot;application/json&quot;, data:data &#125;); promise.done(cb);&#125;//传递JSONfunction doAddStudent() &#123; var jsonData = JSON.stringify(&#123; &apos;usrId&apos;: usrId, &apos;pwd&apos;: pwd, &apos;username&apos;: username &#125;); postData(urlAddStudent, jsonData, cbAddStudent);&#125;//返回结果function cbAddStudent(result) &#123; if (result.code == 99) &#123; alert(result.msg); &#125; else &#123; alert(&quot;添加成功！&quot;); location.href = &apos;/p/index&apos;; &#125;&#125; 4.3 阅卷（查看考题信息和学生答题模块方法类似） 进入页面通过POST从数据库获得题目列表，渲染出题号列表，每个题号给予一个data-id post获取题目列表，通过$.format(QUESTION_LIST, list[i]._id, i+1);渲染每一个题号，添加到(&quot;.item-number&quot;里；QUESTION_LIST模板var QUESTION_LIST = &quot;&lt;div class=&#39;question-item&#39; data-toggle=&#39;select&#39; data-id=&#39;{0}&#39;&gt;{1}&lt;/div&gt;&quot;;123456789101112//获取题目列表function getQuestionList() &#123; var jsonData = JSON.stringify(&#123;&#125;); postData(urlGetQuestionList, jsonData, cbQuestionList);&#125;function cbQuestionList(result) &#123; var list = result.results; for(var i = 0; i &lt; list.length; i++) &#123; var html = $.format(QUESTION_LIST, list[i]._id, i+1); $(&quot;.item-number&quot;).append(html); &#125;&#125; 点击题号获得data-id $(&quot;body&quot;).on(&quot;click&quot;, &quot;[data-toggle=&#39;select&#39;]&quot;, showContent);12345678910111213//显示题目内容和学生答题内容function showContent(e) &#123; $(&quot;.answer-wrap&quot;).removeClass(&quot;hide&quot;); e.preventDefault(); var $this = $(this); questionId = $this.data(&apos;id&apos;); $(&quot;#question-head&quot;).text(&quot;第&quot; + $(this).text() + &quot;题&quot;); getQuestionCtn(); getAnswerOne(); if(questionId != 0) &#123; saveMark(); &#125;&#125; post获取题目内容,返回结果放到指定div内$(&quot;#questionContent&quot;).text(result.content);1234567891011//获取题目内容function getQuestionCtn() &#123; var jsonData = JSON.stringify(&#123; &quot;_id&quot;: questionId &#125;); postData(urlGetQuestionCtn, jsonData, cbShowQuestionCtn);&#125;function cbShowQuestionCtn(result) &#123; $(&quot;#que-score&quot;).text(&quot;分值：&quot; + result.score); $(&quot;#questionContent&quot;).text(result.content);&#125; post获取学生答题内容，返回的结果放到指定div内$(&quot;#answerCtn&quot;).text(result.answerCtn);12345678910111213141516//获得学生答案function getAnswerOne() &#123; var jsonData = JSON.stringify(&#123; &quot;userId&quot;: studentId, &quot;questionId&quot;: questionId &#125;); postData(urlGetAnswerOne, jsonData, cbShowAnswer);&#125;function cbShowAnswer(result) &#123; if(result != &quot;99&quot;) &#123; $(&quot;#give-score&quot;).val(result.score); $(&quot;#answerCtn&quot;).text(result.answerCtn); &#125; else &#123; $(&quot;#answerCtn&quot;).text(&quot;该学生没有完成该题目&quot;); &#125;&#125; 4.4 考生端倒计时 将教师设定的开考时间和结束时间分别与当前时间比较，得到相差的时间差毫秒seconds。对seconds进行处理得到格式化的字符串表示时间。 若当前时间小于开考时间，显示距离考试开始倒计时，到时间seconds &lt;= 0，进入答题倒计时，显示距离考试结束倒计时，直到seconds &lt;= 0，停止倒计时并自动提交考卷，考生转换成提交状态SUBMIT； 123456789101112131415161718192021222324252627282930313233343536373839function getTimeDifference(y, n, M, h, m) &#123; var now = new Date(); var startTime = new Date(y, n, M, h, m); var timeDifference = startTime.getTime() - now.getTime(); var second = parseInt(timeDifference / 1000); var time = &#123; remain: second, second: (second &lt; 60) ? second : second % 60, hour: parseInt(second / 3600), minute: parseInt((second - parseInt(second / 3600) * 3600) / 60) &#125;; return time;&#125;//考试开始时间function timeBefore() &#123; var timer = setInterval(function() &#123; var time = getTimeDifference(2016, 10, 24, 18, 56); $(&apos;#time-title&apos;).text(&quot;距离考试开始&quot;); $(&apos;#time-ctn&apos;).text(time.hour + &quot; : &quot; + time.minute + &quot; : &quot; + time.second); if(time.remain &lt;= 0) &#123; status = START; showExamTime(); clearInterval(timer); &#125; &#125;, 1000);&#125;//考试结束倒计时function showExamTime() &#123; var timer = setInterval(function() &#123; var time = getTimeDifference(2016, 10, 24, 23, 59); $(&apos;#time-title&apos;).text(&quot;距离考试结束&quot;); $(&apos;#time-ctn&apos;).text(time.hour + &quot; : &quot; + time.minute + &quot; : &quot; + time.second); if(time.remain &lt;= 0) &#123; status = END; doUpdate(SUBMIT); clearInterval(timer); &#125; &#125;, 1000);&#125; 5. 将考生端的考生状态实时更新到教师端 考生登录系统发送带有用户IDuserId和用户类型category的 login 消息给服务器，服务器保存该用户（user[userId] = socket），接着判断该用户是否为教师，若是则保存teacherId；最后在数据库中将该用户状态更新为登录LOGIN状态，向教师端发送reload消息，教师端接收到后重新post获取学生状态; 开考时间到，考生处于可考试状态WAIT，考生点击题号转换成答题状态EXAM，post到数据库更新状态EXAM，同时向服务器发送状态转换消息update status，服务器接收到后向教师端发送reload消息`; 考生点击提交按钮，数据库更新状态SUBMIT，同时向服务器发送状态转换消息update status，服务器接收到后向教师端发送reload消息`; 考生端12345678910111213141516171819202122232425262728293031323334353637383940414243//socket初始化function socketInit() &#123; var data = &#123; userId: userId, userCategory: userCategory &#125;; socket.emit(&quot;login&quot;, data); status = LOGIN;&#125;function showQuestion(e) &#123; //如果为开考状态且用户不处于提交状态 if(status == START &amp;&amp; userStatus != SUBMIT) &#123; getQuestionCtn(); //获取题目内容 getAnswerOne(); //获取保存的答题内容 doUpdate(EXAM); //转换为答题状态 &#125; else if(userStatus == SUBMIT) &#123; alert(&quot;你已提交答卷，请等候老师批阅。&quot;); &#125; else if(status != START) &#123; alert(&quot;考试时间未到！&quot;); &#125;&#125;//获取题目列表function getQuestionCtn() &#123;&#125;function cbShowQuestionCtn(result) &#123;&#125;//保存答题内容function doSaveAnswer() &#123;&#125;//获取答题保存的内容function getAnswerOne() &#123;&#125;function cbShowAnswer(result) &#123;&#125;//数据库更新用户状态SUBMIT，向教师端发送reload消息function doUpdate(status) &#123; socket.emit(&quot;update status&quot;);&#125;//转换成SUBMIT状态function cbUpdateStatus(result) &#123; userStatus = SUBMIT;&#125; 服务器123456789101112131415161718192021222324252627282930313233343536373839io.on(&apos;connection&apos;, function(socket)&#123; //用户登录 socket.on(&apos;login&apos;, function (data) &#123; socket.name = data.userId; user[data.userId] = socket; var data2 = &#123; userId: socket.name, status: &quot;LOGIN&quot; &#125;; dbHelper.updateStatus(data2, function (success, doc) &#123;&#125;); //用户类型-老师 if(data.userCategory === &quot;TEACHER&quot;) &#123; teacherId = data.userId; &#125; //向老师的客户端发送重新加载命令 if(teacherId !== 0) &#123; user[teacherId].emit(&quot;reload&quot;); &#125; &#125;); socket.on(&apos;update status&apos;, function () &#123; if(teacherId !== 0) &#123; user[teacherId].emit(&quot;reload&quot;); &#125; &#125;); //用户退出 socket.on(&apos;disconnect&apos;, function () &#123; var data = &#123; userId: socket.name, status: &quot;INIT&quot; &#125;; dbHelper.updateStatus(data, function (success, doc) &#123;&#125;); if(socket.name === teacherId) &#123; teacherId = 0; &#125; else if(teacherId !== 0)&#123; user[teacherId].emit(&quot;reload&quot;); &#125; delete user[socket.name]; &#125;);&#125;); Github参考代码","categories":[],"tags":[{"name":"Node.js","slug":"Node-js","permalink":"http://huqiyang.github.io/tags/Node-js/"}]},{"title":"Hello World","slug":"hello-world","date":"2017-02-09T03:42:11.386Z","updated":"2017-02-09T03:42:11.393Z","comments":true,"path":"2017/02/09/hello-world/","link":"","permalink":"http://huqiyang.github.io/2017/02/09/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}